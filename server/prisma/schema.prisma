// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  email String @unique 
  password String 
  role String
  registrationDate DateTime
  learning_rank String?
  profilePicture String?
  topic Topic[]
  module Module[] @relation("UserModules")
  userModules UserModule[] 
 transaction Transaction[]
}

model Module {
  id Int @id @default(autoincrement())
  title String 
  description String
  image String
  tags String
  difficulty String
  price Float
  progress Int @default(0)
  isLocked Boolean
  courses Course[]
  users User[] @relation("UserModules")
  moduleUsers UserModule[]
transaction Transaction[]
}

model Course{
  id Int @id @default(autoincrement())
  module Module @relation(fields: [moduleId], references: [id])
  moduleId Int
  title String
  description String
  markdownUrl String
  isCompleted Boolean @default(false)
}

model UserModule {
  userId   Int
  moduleId Int
  user     User      @relation(fields: [userId], references: [id])
  module   Module    @relation(fields: [moduleId], references: [id])

  @@id([userId, moduleId])
}
model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  published  Boolean    @default(false)
  authorId   Int
  topic      Topic      @relation(fields: [topicId], references: [id])
  topicId    Int
}

model Topic {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  posts    Post[]
}

model Transaction {
  id            Int       @id @default(autoincrement())
  userId        Int
  moduleId      Int
  amount        Float
  status        TransactionStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  module        Module    @relation(fields: [moduleId], references: [id])
}
enum TransactionStatus {
  Pending
  Completed
  Failed
}
